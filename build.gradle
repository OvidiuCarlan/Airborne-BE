plugins {
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
    id 'org.flywaydb.flyway' version '7.8.1'
}

sonar {
    properties {
        property "sonar.projectKey", "Airborne"
        property "sonar.projectName", "Airborne"
        property "sonar.token", "sqp_ba03ae2a39e8afe51a5d7511fe1f271fd8b20ae7"
        property "sonar.qualitygate.wait", true
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", [
                "src/main/java/airborne/configuration/**/*",
                "src/main/java/airborne/AirborneApplication.java",
                "src/main/java/airborne/domain/**/*",
                "src/main/java/airborne/business/exception/**/*",
                "src/main/java/airborne/business/dto/**/*",
                "src/main/java/airborne/business/controller/PostController",
                "src/main/java/airborne/business/controller/ReportController"
        ]
    }
}

flyway {
    url = 'jdbc:sqlserver://mssqlstud.fhict.local;databaseName=dbi481968_airbornedb;encrypt=false'
    user = 'dbi481968_airbornedb'
    password = 'parola'
    locations = ['filesystem:src/main/resources/db/migration']
    baselineOnMigrate = true
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.flywaydb:flyway-core'
    implementation "org.flywaydb:flyway-sqlserver"
    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '12.4.2.jre11'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'org.projectlombok:lombok:1.18.26'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test
}

    afterEvaluate {
        jacocoTestReport.classDirectories.setFrom(files(jacocoTestReport.classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "airborne/configuration/**/*",
                    "airborne/AirborneApplication.java",
                    "airborne/domain/**/*",
                    "airborne/business/exception/**/*",
                    "airborne/business/dto/**/*",
                    "airborne/business/controller/PostController",
                    "airborne/business/controller/ReportController",
            ])
        }))
    }

    tasks.named('sonarqube').configure {
        dependsOn jacocoTestReport
    }